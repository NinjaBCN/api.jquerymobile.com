<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="button" type="widget" widgetnamespace="mobile" event-prefix="button" init-selector="input[type='button'], input[type='submit'], input[type='reset']">
	<title>Button Widget</title>
    <desc>Creates a button widget</desc>
    <longdesc>
		<h2>Buttons</h2>
		<p>Buttons are coded with standard HTML <code>input</code> elements, then enhanced by jQuery Mobile to make them more attractive and useable on a mobile device.</p>

		<h3>Form buttons</h3>

		<p>For ease of styling, the framework automatically converts any <code>input</code> element with a <code>type</code> of <code>submit</code>, <code>reset</code>, or <code>button</code> into a custom styled button - there is no need to add the <code>data-role="button"</code> attribute. However, if needed, you can directly call the <placeholder name="name"/> plugin on any selector, just like any jQuery plugin:</p>

<pre><code>
$( "[type='submit']" ).button();
</code></pre>

		<p><strong>Input type="button"</strong> based <placeholder name="name"/>:</p>
<pre><code>
&lt;input type=&quot;button&quot; value=&quot;Button&quot; /&gt;
</code></pre>

		<iframe src="/resources/button/example5.html" style="width:100%;height:90px;border:0px"></iframe>

		<p><strong>Input type="submit"</strong> based <placeholder name="name"/>:</p>
<pre><code>
&lt;input type=&quot;submit&quot; value=&quot;Submit Button&quot; /&gt;
</code></pre>

		<iframe src="/resources/button/example6.html" style="width:100%;height:90px;border:0px"></iframe>

		<p><strong>Input type="reset"</strong> based <placeholder name="name"/>:</p>
<pre><code>
&lt;input type=&quot;reset&quot; value=&quot;Reset Button&quot; /&gt;
</code></pre>

		<iframe src="/resources/button/example7.html" style="width:100%;height:90px;border:0px"></iframe>

		<h2>Providing pre-rendered markup</h2>
		<p>You can improve the load time for your page by providing the markup that the <placeholder name="name"/> widget would normally create during its initialization.</p>
		<p>The <placeholder name="name"/> widget adds a wrapper <code>div</code> around the <code>input</code>. By providing such a wrapper yourself, and by indicating that you have done so by setting the attribute <code>data-enhanced="true"</code>, you instruct the <placeholder name="name"/> widget to skip the generation of the wrapper div and to assume that the parent of the <code>input</code> is the wrapper div.</p>
		<p>When you provide such pre-rendered markup you must also set all the classes that the framework would normally set, and you must also set all data-attributes whose values differ from the default to indicate that the pre-rendered markup reflects the non-default value of the corresponding widget option.</p>
		<p>In the example below, pre-rendered markup for a <placeholder name="name"/> is provided. The attribute <code>data-corners="false"</code> is explicitly specified, since the absence of the <code>ui-corner-all</code> class on the wrapper element indicates that the "corners" widget option is to be false.</p>

<pre><code>
&lt;div class="ui-btn ui-input-btn ui-shadow"&gt;
	The Button
	&lt;input type="button" data-corners="false" data-enhanced="true" value="The Button"&gt;&lt;/input&gt;
&lt;/div&gt;
</code></pre>

<iframe src="/resources/button/example49.html" style="width:100%;height:90px;border:0px"></iframe>

		</longdesc>
	<added>1.0</added>
	<options>
		<option name="corners" default="true" example-value="false" deprecated="1.4.0">
			<desc>
				<strong>This option is deprecated in 1.4.0 and will be removed in 1.5.0. Add class <code>ui-corner-all</code> to the <a href="#option-wrapperClass">wrapperClass</a> option to have rounded corners: <code>data-wrapper-class="ui-corner-all"</code>.</strong>
				<p>Applies the theme button border-radius if set to true.</p>
				<p>This option is also exposed as a data attribute: <code>data-corners="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<xi:include href="../includes/widget-option-disabled.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-option-enhanced.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<option name="icon" default="null" example-value='"star"' deprecated="1.4.0">
			<desc>
				<strong>This option is deprecated in 1.4.0 and will be removed in 1.5.0. Add class <code>ui-icon-*</code> to the <a href="#option-wrapperClass">wrapperClass</a> option to have an icon: <code>data-wrapper-class="ui-icon-star"</code>.</strong>
				<p>Applies an icon from the icon set.</p>
				<p>The <a href="/classes/">CSS Framework</a> documentation contains a reference of all the icons available in the default theme.</p>
				<p>This option is also exposed as a data attribute: <code>data-icon="star"</code>.</p>
			</desc>
  		<type name="String" />
		</option>
		<option name="iconpos" default='"left"' deprecated="1.4.0" example-value='"right"'>
			<desc>
				<strong>This option is deprecated in 1.4.0 and will be removed in 1.5.0. Add class <code>ui-btn-icon-*</code> to the <a href="#option-wrapperClass">wrapperClass</a> option to specify icon position: <code>data-wrapper-class="ui-btn-icon-right"</code>.</strong>
				<p>Positions the icon in the <placeholder name="name"/>. Possible values: left, right, top, bottom, none, notext. The notext value will display an icon-only <placeholder name="name"/> with no text feedback.</p>
				<p>This option is also exposed as a data attribute: <code>data-iconpos="right"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="iconshadow" default="false" deprecated="1.4.0">
			<desc>
				<strong>This option is deprecated in 1.4.0 and will be removed in 1.5.0.</strong>
				<p>Applies the theme shadow to the <placeholder name="name"/>'s icon if set to true.</p>
				<p>This option is also exposed as a data attribute: <code>data-iconshadow="true"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<xi:include href="../includes/widget-option-initSelector.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<option name="inline" default="null (false)" deprecated="1.4.0" example-value="true">
			<desc>
				<strong>This option is deprecated in 1.4.0 and will be removed in 1.5.0. Add class <code>ui-btn-inline</code> to the <a href="#option-wrapperClass">wrapperClass</a> option to set the button inline: <code>data-wrapper-class="ui-btn-inline"</code>.</strong>
				<p>If set to <code>true</code>, this will make the <placeholder name="name"/> act like an inline <placeholder name="name"/> so the width is determined by the <placeholder name="name"/>'s text. By default, this is null (false) so the <placeholder name="name"/> is full width, regardless of the feedback content. Possible values: true, false.</p>
				<p>This option is also exposed as a data attribute: <code>data-inline="true"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="mini" default="null (false)" deprecated="1.4.0" example-value="true">
			<desc>
				<strong>This option is deprecated in 1.4.0 and will be removed in 1.5.0. Add class <code>ui-mini</code> to the <a href="#option-wrapperClass">wrapperClass</a> option to make the button smaller: <code>data-wrapper-class="ui-mini"</code>.</strong>
				<p>If set to <code>true</code>, this will display a more compact version of the <placeholder name="name"/> that uses less vertical height by applying the <code>ui-mini</code> class to the outermost element of the <placeholder name="name"/> widget.</p>
				<p>This option is also exposed as a data attribute: <code>data-mini="true"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="shadow" default="true" deprecated="1.4.0" example-value="false">
			<desc>
				<strong>This option is deprecated in 1.4.0 and will be removed in 1.5.0. Add class <code>ui-shadow</code> to the <a href="#option-wrapperClass">wrapperClass</a> option to set the shadow: <code>data-wrapper-class="ui-shadow"</code>.</strong>
				<p>Applies the drop shadow style to the <placeholder name="name"/> if set to true.</p>
				<p>This option is also exposed as a data attribute: <code>data-shadow="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="theme" default="null, inherited from parent" example-value='"b"' deprecated="1.4.0">
			<desc>
				<strong>This option is deprecated in 1.4.0 and will be removed in 1.5.0. Add class <code>ui-btn-[a-z]</code> to the <a href="#option-wrapperClass">wrapperClass</a> option to specify the theme: <code>data-wrapper-class="ui-btn-b"</code>.</strong>
				<p>Sets the color scheme (swatch) for the <placeholder name="name" /> widget. It accepts a single letter from a-z that maps to the swatches included in your theme.</p>
				<p>Possible values: swatch letter (a-z).</p>
				<p>This option is also exposed as a data attribute: <code>data-theme="b"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="wrapperClass" default="null" example-value='"ui-btn ui-btn-b ui-corner-all ui-btn-inline"'>
			<desc>Allows you to specify CSS classes to be set on the <placeholder name="name"/>'s wrapper element.
				<p>This option is also exposed as a data attribute: <code>data-wrapper-class="ui-btn ui-btn-b ui-corner-all ui-btn-inline"</code>.</p>
			</desc>
			<type name="String" />
		</option>
	</options>
	<events>
		<xi:include href="../includes/widget-event-create.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
	</events>
	<methods>
		<xi:include href="../includes/widget-method-destroy.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-method-disable.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-method-enable.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-method-option.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<method name="refresh">
			<desc>update the form <placeholder name="name"/>.
			<p>If you manipulate a form <placeholder name="name"/> via JavaScript, you must call the refresh method on it to update the visual styling.</p>
<pre><code>
$( "[type='submit']" ).button( "refresh" );
</code></pre>
			</desc>
		</method>
	</methods>
	<example>
	<!--<height>200</height>-->
		<desc>A basic example of a <placeholder name="name"/></desc>
		<html><![CDATA[<div data-role="header">
		<h1>jQuery Mobile Example</h1>
	</div>
	<div data-role="content">
    <form action="#" method="get">
      <input type="submit" value="Input Button"></input>
    </form>
	</div>]]></html>
	</example>
	<category slug="widgets"/>
</entry>
